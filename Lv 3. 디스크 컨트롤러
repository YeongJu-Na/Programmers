import java.util.PriorityQueue;
import java.util.Comparator;
class Solution {
    public int solution(int[][] jobs) {
        int answer = 0;

        PriorityQueue<Job> Ready = new PriorityQueue<>((o1,o2)->o1.start-o2.start);   //모든 요청 시작시간 기준 오름차순 정렬
        PriorityQueue<Job> Dojob = new PriorityQueue<>((o1,o2)->o1.end-o2.end);     //작업 가능 요청들에 대해 완료 시간 기준 오름차순 정렬

        for(int i=0;i<jobs.length;i++){
            Ready.add(new Job(jobs[i][0],jobs[i][1]));
        }

        int t = 0;                                  //curre time
        while(!Ready.isEmpty()||!Dojob.isEmpty()){
            while(!Ready.isEmpty()&&Ready.peek().start<=t){   //처리할 요청 남아있고, 현재 시간에 처리 가능할 때
                Dojob.add(Ready.poll());      //작업 큐로 넣기
            }
            if(!Dojob.isEmpty()){       //현재 작업할 요청 존재 시
                Job cur = Dojob.poll();
                t += cur.end;           //해당 요청 처리 후 그 시간으로
                answer += t-cur.start;        //요청부터 종료까지 걸린 시간
            }
            else t++;   //처리할 수 있는 요청 없는 경우 시간 1증가
        }

        return answer/jobs.length;      //평균 

    }
}
class Job{
    int start;
    int end;
    Job(int start, int end){
        this.start = start;
        this.end = end;
    }
}
