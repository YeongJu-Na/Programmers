import java.util.Queue;
import java.util.LinkedList;
import java.util.Arrays;
import java.util.PriorityQueue;
class Solution {
    public int solution(int N, int[][] road, int K) {
        int answer = 0;
        int[] dist= new int[N+1];
        PriorityQueue<Road> q = new PriorityQueue<>();
        
        LinkedList<Road>[] routes = new LinkedList[N+1];
        for(int i=0;i<N+1;i++) routes[i]=new LinkedList<>();
        
        for(int i=0;i<road.length;i++){
            routes[road[i][0]].add(new Road(road[i][1],road[i][2]));
            routes[road[i][1]].add(new Road(road[i][0],road[i][2]));
        }
        Arrays.fill(dist,Integer.MAX_VALUE);
        dist[1]=0;
        q.add(new Road(1,0));
        
        while(!q.isEmpty()){
            Road cur= q.poll();
            
            for(Road adj: routes[cur.dest]){
               if(adj.cost+dist[cur.dest] < dist[adj.dest]){  //경로 갱신 가능 체크먼저
                   dist[adj.dest]=adj.cost+dist[cur.dest];
                   q.add(adj);
               }
            }
        }
        for(int i=1;i<N+1;i++){
            if(dist[i]<=K) answer++;
        }
        
        return answer;
    }
}
class Road implements Comparable<Road>{
    int dest;
    int cost;
    Road(int dest, int cost){
        super();
        this.dest = dest;
        this.cost = cost;
    }
    public int compareTo(Road r){
        return this.cost-r.cost;
    }
}
