import java.util.Queue;
import java.util.LinkedList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.HashSet;
class Solution {
    static int n;
    static int[] p;
    public int solution(int[][] land, int height) {
        int answer = 0;
        int[] dx = {1,0,-1,0};
        int[] dy = {0,1,0,-1};
        n = land.length;        //n x n 행렬
        //boolean[][] visited = new boolean[n][n];
        int[][] area = new int[n][n];
        Queue<Node> q =new LinkedList<>();
        int cnt = 1;
        for(int i=0;i<n;i++){           //사다리 없이 방문 가능한 곳들끼리 같은 area값
            for(int j=0;j<n;j++){
                if(area[i][j]!=0) continue; //이미 방문한 곳
                area[i][j]=cnt;
                q.add(new Node(i,j));
                while(!q.isEmpty()){
                    Node cur = q.poll();
                    for(int k=0;k<4;k++){
                        int nx = cur.x+dx[k];
                        int ny = cur.y+dy[k];
                        if(!isRange(nx,ny)||area[nx][ny]!=0) continue;
                        if(Math.abs(land[cur.x][cur.y]-land[nx][ny])>height) continue; //사다리 필요한 경우
                        area[nx][ny]=cnt;
                        q.add(new Node(nx, ny));
                    }
                }
                cnt++;
            }
        }
        /*for(int i=0;i<n;i++){
            System.out.println(Arrays.toString(chk[i]));
        }*/
        //int[][] ladder = new int[cnt][cnt];     //각 영역간 필요한 사다리비용
        boolean[][] visited =new boolean[n][n];
         PriorityQueue<Edge> routes = new PriorityQueue<>((o1,o2)->o1.cost-o2.cost);
        
       for(int i=0;i<n;i++){
           for(int j=0;j<n;j++){
               visited[i][j]=true;
               int row = area[i][j];     //검사할 영역의 영역 번호
               
               for(int k=0;k<4;k++){
                   int nx = i+dx[k];
                   int ny = j+dy[k];
                   if(!isRange(nx, ny)||visited[nx][ny]||area[nx][ny]==area[i][j]) continue;//||visited[nx][ny]
                   int col = area[nx][ny];   //검사할 영역의 adj의 영역 번호
                   int val = Math.abs(land[i][j]-land[nx][ny]); //두 영역 간 높이차
                   routes.add(new Edge(row, col, val));
                   
               }
           }
       }
        //MST - union-find
          p=new int[cnt];
        int c=0;
        Arrays.fill(p,-1);
        while(!routes.isEmpty()){
            Edge e = routes.poll();
            if(merge(e.start,e.end)){
                answer +=e.cost;
                if(++c==cnt-2) break;
            }
        }
       
        return answer;
    }
    static int find(int x){
        if(p[x]<0) return x;
        return p[x]=find(p[x]);
    }
    static boolean merge(int a, int b){
        a=find(a);
        b=find(b);
        if(a==b) return false;
        p[b]=a;
        return true;
    }
    
    static boolean isRange(int x, int y){
        if(x<0||y<0||x>=n||y>=n) return false;
        return true;
    }
}
class Edge implements Comparable<Edge>{
    int start;
    int end;
    int cost;
    Edge(int start, int end, int cost){
        this.start=start;
        this.end = end;
        this.cost = cost;
    }
    public int compareTo(Edge e){
        return this.cost-e.cost;
    }
}
class Node{
    int x;
    int y;
    Node(int x, int y){
        this.x=x;
        this.y=y;
    }
}
