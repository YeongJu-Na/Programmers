///////////////////////////////// 예전 풀이 - bfs
import java.util.*;
class Solution {
    public int solution(String begin, String target, String[] words) {
        int answer = 0;
        int[] cnt = new int[words.length];  //begin에서 도달 가능한 거리,0 이면 도달x
        Queue<Integer> q = new LinkedList<>();
        
        for(int i=0;i<words.length;i++){
            if(check(begin,words[i])){
                if(words[i].equals(target)) return 1;
                q.add(i);
                cnt[i]=1;
            }
        }
        if(q.isEmpty()) return 0; //begin에서 갈 단어x
        
        while(!q.isEmpty()){
            int idx = q.poll();
            
            for(int i=0;i<words.length;i++){
                if(!check(words[idx],words[i])||i==idx||(cnt[i]!=0&&cnt[i]<=cnt[idx])) continue; //이동불가한 경우
                if(words[i].equals(target)){  //이동가능한 단어이고, 그 값이 target과 같을경우
                    return cnt[idx]+1;
                }
                q.add(i);
                cnt[i] = cnt[idx]+1;
            }
        }
        
        return 0;
    }
    boolean check(String s1, String s2){  //변환 가능 여부 판단
        int idx = Arrays.mismatch(s1.toCharArray(), s2.toCharArray());
        return s1.substring(idx+1).equals(s2.substring(idx+1));
    }
}

////////////////////////////// 다시 푼 풀이 - dfs
class Solution {
    static int ans;
    public int solution(String begin, String target, String[] words) {
        ans = words.length+1;
        
        dfs(begin,new boolean[words.length],0, target, words);
        
        return (ans>words.length)?0:ans;
    }
     static void dfs(String cur, boolean[] chk, int cnt, String target, String[] words){
        if(cur.equals(target)){
            if(cnt<ans) ans = cnt;
            return;
        }
        for(int i=0;i< words.length;i++){
            if(chk[i]||!isMovable(words[i],cur)) continue;
            chk[i]=true;
            dfs(words[i],chk,cnt+1,target,words);
            chk[i]=false;
        }
     }
     // 위 풀이의 check 와 같음
     // 변환 가능 여부
     static boolean isMovable(String s1, String s2){
        if(s1.length()!=s2.length()) return false;
        int cnt = 1;
        for(int i=0;i<s1.length();i++){
            if(s1.charAt(i)==s2.charAt(i)) continue;
            cnt--;
            if(cnt<0) return false;
        }
        return true;
     }
}
