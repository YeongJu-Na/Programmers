import java.util.*;
class Solution {
    
    static char[] arr = {'+','-','*'};
    // expression내의 연산자배열, 숫자배열(피연산자) 저장
    static LinkedList<Integer> ops = new LinkedList<>();
    static LinkedList<Long> nums = new LinkedList<>();
    // 결과값
    static long answer = 0;
    
    public long solution(String expression) {
        int start = 0;
        for(int i=0;i<expression.length();i++){
            if(isDigit(expression.charAt(i))) continue;
            // 연산자가 나오면
            nums.add(Long.parseLong(expression.substring(start,i)));    //하나의 피연산자 추가
            start=i+1;  //다음 숫자의 시작점
            char op = expression.charAt(i);
            // 해당 연산자의 arr index 값 저장
            for(int j=0;j<3;j++){
                if(arr[j]!=op) continue;
                ops.add(j);
                break;
            }
        }
        // 마지막 피연산자 추가
        nums.add(Long.parseLong(expression.substring(start,expression.length())));
        
        perm(0,new int[3], new boolean[3]);
        
        return answer;
    }
    
    //하나의 연산자 우선순위에 대한 결과 
    //temp는 연산자 우선순위, ops: 차례대로 연산자들
    static void sol(int[] temp){
        LinkedList<Long> numsc = new LinkedList<>();
        LinkedList<Integer> opsc = new LinkedList<>();
        
        numsc.addAll(nums);
        opsc.addAll(ops);
        
        // 우선순위 높은 연산자부터 순서대로 확인
        for(int i=0;i<3;i++){
            int size = opsc.size();
            if(size==0) break;  // 수식내 모든 연산자 확인한 경우 (ex) 주어진 수식에 연산자가 1개뿐인 경우
            long num1 = numsc.poll();   //첫 번째 피연산자
            long num2 = 0;
            //수식 내 모든 연산자배열 돌면서
            for(int j=0;j<size;j++){
                int op = opsc.poll();   // 수식 내 연산자
                if(op!=temp[i]){        //현재의 우선순위인 연산자가 아니면
                    numsc.add(num1);    //첫 번째 피연산자 계산 없이 다시 넣고, 새로 꺼내기
                    num1 = numsc.poll();
                    opsc.add(op);       //연산자 다시 넣기
                }
                else{   // 연산해야 하는 경우
                    num2 = numsc.poll();    //두 번째 피연산자 꺼내기
                    // 연산
                    if(op==0) num1 += num2;
                    else if(op==1) num1 -= num2;
                    else num1 *= num2;
                }
            }
            numsc.add(num1);
        }
        long val = Math.abs(numsc.get(0));
        if(val>answer) answer=val;
    }
    // 해당 문자가 숫자인지 
    static boolean isDigit(char c){
        if(c<'0'||c>'9') return false;
        return true;
    }
    // 가능한 연산자 우선순위 구하기
    //temp: 연산자 우선순위의 인덱스 배열(0이 가장 높은 우선순위), visited: 방문 여부 체크
    static void perm(int cur, int[] temp, boolean[] visited){
        if(cur==3){
            sol(temp);
            return;
        }
        for(int i=0;i<3;i++){
            if(visited[i]) continue;
            visited[i]=true;
            temp[cur]=i;
            perm(cur+1,temp, visited);
            visited[i]=false;
        }
    }
}
