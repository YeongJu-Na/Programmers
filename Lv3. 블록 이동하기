import java.util.*;
class Solution {
    static int n;

    public int solution(int[][] board) {

        int[] dx = {1,0,-1,0};
        int[] dy = {0,1,0,-1};

        int ans = 10000;
        n = board.length;

        Queue<Robot> q = new LinkedList<>();
        q.add(new Robot(new Node(0,0), new Node(0,1), 0));

        HashSet<Robot> visited = new HashSet<>();
        visited.add(q.peek());

        while(!q.isEmpty()){
            Robot cur = q.poll();

            if(isAns(cur.n1)||isAns(cur.n2)){
                ans = cur.cnt;
                break;
            }
            for(int i=0;i<4;i++){
                Node nn1 = new Node(cur.n1.x+dx[i], cur.n1.y+dy[i]);
                Node nn2 = new Node(cur.n2.x+dx[i], cur.n2.y+dy[i]);

                if(!isRange(nn1)||!isRange(nn2)) continue;
                if(board[nn1.x][nn1.y]!=0||board[nn2.x][nn2.y]!=0) continue;

                Robot adj1 = new Robot(cur.n1, nn1, cur.cnt+1);
                Robot adj2 = new Robot(cur.n2, nn2, cur.cnt+1);
                Robot adj3 = new Robot(nn1, nn2, cur.cnt+1);

                if(!visited.contains(adj1)){
                    visited.add(adj1);
                    visited.add(new Robot(nn1, cur.n1, cur.cnt+1));
                    q.add(adj1);
                }
                if(!visited.contains(adj2)){
                    visited.add(adj2);
                    visited.add(new Robot(nn2, cur.n2, cur.cnt+1));
                    q.add(adj2);
                }
                if(!visited.contains(adj3)){
                    visited.add(adj3);
                    visited.add(new Robot(nn2, nn1, cur.cnt+1));
                    q.add(adj3);
                }
            }
        }

        // System.out.println(ans);

        return ans;
    }
    static boolean isAns(Node node){
        return (node.x==n-1) && (node.y==n-1);
    }
    static boolean isRange(Node node){
        return (node.x>=0 && node.x<n && node.y>=0 && node.y<n);
    }
}
class Node{
    int x;
    int y;
    Node(int x, int y){
        super();
        this.x=x;
        this.y=y;
    }
    public int hashCode(){
        //return Objects.hash(Integer.toString(x)+Integer.toString(y));
        return Objects.hash(x,y);
    }
    public boolean equals(Object o){
        if(o instanceof Node){
            Node nn= (Node)o;
            return this.hashCode()==nn.hashCode();
        }
        return false;
    }
}
class Robot{
    Node n1;
    Node n2;
    int cnt;
    Robot(Node n1, Node n2, int cnt){
        super();
        this.n1 = n1;
        this.n2 = n2;
        this.cnt = cnt;
    }
    public int hashCode(){
        return  Objects.hash(n1.x,n1.y,n2.x,n2.y);
    }

    public boolean equals(Object o){
        if(o instanceof Robot){
            Robot r = (Robot)o;

            return (this.n1.equals(r.n1)&&this.n2.equals(r.n2))|| (this.n1.equals(r.n2)&&this.n2.equals(r.n1));
        }
        return false;
    }
}
/////////////////////////////////// 새 풀이: hashCode만든 후 equals를 제대로 만들지 않았어서 테스트케이스 13, 14 통과 못했음
==> equals는 해시테이블에서 해시값이 충돌된 것들에 대해 같은것인지 판별할 때 사용됨!
///////////////////////////////////////////////////////// 이전 풀이
import java.util.*;
class Solution {
    static int n;
    public int solution(int[][] board) {
        int[] dx = {1,0,-1,0};
        int[] dy = {0,1,0,-1};
        
        int answer = 0;
        n=board.length;
        int[][] chk = new int[n][n];    //가로 1, 세로 2
        chk[0][0]=1;
        
        Queue<State> q = new LinkedList<>();
        q.add(new State(0,0,1));
        
        while(!q.isEmpty()){
            int size = q.size();
            for(int i=0;i<size;i++){
                State cur = q.poll();
                
                if(cur.st==1&&cur.x==n-1&&cur.y+1==n-1) return answer;  //가로일 때
                if(cur.st==2&&cur.x+1==n-1&&cur.y==n-1) return answer;  //세로일 때
                
                for(int j=0;j<4;j++){
                    int nx = cur.x+dx[j];
                    int ny = cur.y+dy[j];
                    //범위가 아니거나 벽이 있는 경우
                    if(!isRange(nx,ny)||board[nx][ny]==1) continue;
                    //이미 체크한 경우
                    if(chk[nx][ny]==cur.st||chk[nx][ny]==3) continue;
                    //가로인 경우, 오른쪽도 범위가 아니거나 벽이 있으면 안됨
                    if(cur.st==1&&(!isRange(nx,ny+1)||board[nx][ny+1]==1)) continue;
                    //세로,아래
                    if(cur.st==2&&(!isRange(nx+1,ny)||board[nx+1][ny]==1)) continue;
                    
                    //같은 방향(cur.st)으로 들어갈 수 있음
                    chk[nx][ny] += cur.st;
                    q.add(new State(nx,ny,cur.st));
                    
                    //회전
                    if(cur.st==1&&(j==0||j==2)){  //가로일 때
                        nx = Math.min(nx,cur.x);
                        if(chk[nx][ny]!=2&&chk[nx][ny]!=3){
                            chk[nx][ny]+=2;               //세로 추가
                            q.add(new State(nx,ny,2));
                            
                        }
                        if(chk[nx][ny+1]!=2&&chk[nx][ny+1]!=3){
                            chk[nx][ny+1]+=2;
                            q.add(new State(nx,ny+1,2));
                            
                        }
                    }
                    if(cur.st==2&&(j==1||j==3)){      //세로일 때
                        ny = Math.min(ny,cur.y);
                        if(chk[nx][ny]!=1&&chk[nx][ny]!=3){
                            chk[nx][ny]+=1;         //가로 추가
                            q.add(new State(nx,ny,1));
                            
                        }
                        if(chk[nx+1][ny]!=1&&chk[nx+1][ny]!=3){
                            chk[nx+1][ny]+=1;
                            q.add(new State(nx+1,ny,1));
                           
                        }
                    }
                }
                
            }
            answer++;
            
        }
        return answer;
        
    }
    static boolean isRange(int x, int y){
        if(x<0||y<0||x>=n||y>=n) return false;
        return true;
    }
}
class State{
    int x;
    int y;
    int st;
    State(int x, int y, int st){
        this.x = x;
        this.y = y;
        this.st = st;
    }
}
