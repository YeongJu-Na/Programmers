import java.util.*;
class Solution {
    // 11 20
    static int[][] arr;
    
    public int[][] solution(int n, int[][] build_frame) {
        
        arr = new int[n+1][n+1];
        int cnt = 0;
        
        for(int[] bf: build_frame){
            int thing = bf[2]+1;
            
            if(bf[3]==0){       // 제거
                
                arr[bf[0]][bf[1]]-= thing;
                if(!isRemovable()) arr[bf[0]][bf[1]] += thing;
                else cnt--;
                
            }
            else{       // 추가
                if(isValid(bf[0],bf[1],thing)){
                    arr[bf[0]][bf[1]] |= thing;
                    cnt++;
                }
            }
        }
        
        int[][] ans = new int[cnt][3];
        int idx = 0;
        
        for(int i=0;i<n+1;i++){
             for(int j=0;j<n+1;j++){
                 if(arr[i][j]==0) continue;
                 if((arr[i][j]&1)!=0){
                     ans[idx][0]=i;
                     ans[idx][1]=j;
                     ans[idx++][2]=0;
                 }
                 if((arr[i][j]&2)!=0){
                     ans[idx][0]=i;
                     ans[idx][1]=j;
                     ans[idx++][2]=1;
                 }
             }
         }
        
        return ans;
    }
    
    static boolean isRemovable(){
        int n = arr.length;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if((arr[i][j]&1)!=0 && !isValid(i,j,1)) return false;
                if((arr[i][j]&2)!=0 && !isValid(i,j,2)) return false;
            }
        }
        return true;
    }
    // op(기둥=1, 보=2)가 해당 위치(x,y)에 존재 가능한지
    static boolean isValid(int x, int y, int op){
        if(op==1){  // 기둥인 경우
            if(y==0) return true;
            
            // isValid 함수를 실행하는 경우: (1) op설치 전 설치가능여부, (2) 이미 설치된 상태에서 다른 거 제거 후 조건 만족 여부 판단
            // 실패이유: arr[x][y]==2로 조건구성해서 --> (2)인 경우를 제대로 생각하지 못했
            if(arr[x][y]>=2) return true;         
            if(x!=0&&arr[x-1][y]>=2) return true;
            if((arr[x][y-1]&1)!=0) return true;
            return false;
        }
        if(op==2){
            if((arr[x][y-1]&1)!=0) return true;
            if((arr[x+1][y-1]&1)!=0) return true;
            if(x!=0&&arr[x-1][y]>=2&&arr[x+1][y]>=2) return true;
            return false;
        }
        return false;
    }
}
