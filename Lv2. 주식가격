import java.util.Stack;
class Solution {
    public int[] solution(int[] prices) {
        int[] answer = new int[prices.length];
        Stack<Integer> st = new Stack<>();    //prices의 인덱스 값 넣을 스택
        
        st.push(0);
        
        for(int i=1;i<prices.length;i++){
            while(!st.isEmpty() && prices[i]<prices[st.peek()]){   //스택에 들어있는 위치의 가격보다 떨어진 경우
                int idx = st.pop();
                answer[idx] = i-idx;      //떨어진 시간 간격 계산
            }
            st.push(i);
        }
        
        while(!st.isEmpty()){     //값이 떨어진적 없는 시점들
            int idx = st.pop();
            answer[idx] = prices.length-idx-1;
        }
        
        return answer;
    }
}
//////// 다른 풀이 1 - 라이브러리 사용 없이, 이중 for문으로 
for(int i=0; i<ps.length;i++) {
			for(int j=i+1;j<ps.length;j++) {
				answer[i]++;
				if(ps[i] > ps[j]) {
					break;
				}
				
			}
		}

//////// 다른 풀이 2 - 가격과 위치정보를 넣어 클래스로 만들고 스택에 넣을 수도 있음
/*
class Price{
    int p;
    int idx;
    Price(int p, int idx){
        this.p=p;
        this.idx=idx;
    }
}
*/
